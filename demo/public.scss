// css3
module.exports= {
  "plugins": {
     "postcss-px-to-viewport": {      viewportWidth: 750,      viewportHeight: 1334,      unitPrecision: 3,      viewportUnit: 'vw',      selectorBlackList: ['.usepixel'],      minPixelValue: 1,      mediaQuery: false    }
   }
}
其中几个配置项的含义如下：

viewportWidth：视口宽度，这里设置为跟设计稿宽度一致；

viewportHeight：视口高度，随便设置一个就可以；

unitPrecision：转换后值的精度，3表示保留3位小数；

viewportUnit：转换成什么视口单位，这里当然是vw；

selectorBlackList：是一个选择符数组，对应声明中的像素单位不会转换；

minPixelValue：最小像素值，大于等于这个值才会转换；

mediaQuery：是否转换媒体查询中的像素。
-----------------------------------
  


img图片保持尺寸，同时有背景色。 img {
  width: 80px;
  height: 80px;
  object-fit: contain;
  background-color: #f8f8f8;
}


.imgs {
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-evenly;

  .img-box {
    display: flex;
    flex-wrap: wrap;
    text-align: center;
    overflow: hidden;

    img {
      margin: 0 auto;
    }

    span {
      // 确保文字处于img下方, 宽度4等分可以设置为25%
      flex-basis: 100%;
      // 左右固定，中间自适应可以让中间，flex-grow: 1
    }
  }
}

// 点击使img变色，必须配合外围的overflow
.click {
  transform: translateY(-60px);
  //颜色、x轴偏移量、y轴偏移量
  filter: drop-shadow(#fd7d18 0 60px);
  -webkit-filter: drop-shadow(#fd7d18 0 60px); //兼容其它浏览器
}


水平粘性居中 position: sticky;
left: 0;

// 换行平均分配
.even {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  width: 100%;

  .box {
    width: 100px; // 每个元素的宽度，决定一行有几个元素。
  }
}

p~ul选择器 p之后出现的所有ul。两种元素必须拥有相同的父元素，但是 ul不必直接紧随 p。+(加号）：二者有相同的父元素，选择紧接在另一个元素后的元素。 >(大于号)：是css3特有的选择器，A>B 表示选择A元素的所有子B元素，只选择一代。 空格：A B {}

  表示A标签的所有子代B标签。 .c1.c2 中间没有空格，表明必须同时有c1 和 c2类的元素才符合条件。, 逗号：A, B {}

  表示A, B两个标签同时拥有大括号中的CSS样式。 若想获取某一元素后的所有子元素，可以使用如下语句：element1 > * {}

  CSS :checked伪类用于匹配被用户选中的单选按钮Radio或复选按钮checkbox。 input[type="checkbox"]:checked + label {
    /* 表示页面上的所有选中的checkbox按钮 */
    color: red;
  }

  option:checked {
    /* 表示页面上的所有选中的select的选项 */
    color: green;
  }

  // <!--<lable>标签的for属性，绑定到input标签上-->
  // css中加号表示选择相邻兄弟,叫做“相邻兄弟选择器”,该选择器能够匹配指定元素后面相邻的兄弟元素。
  <input id="check1"type="checkbox"/> <label for="check1"></label>

  /*当input框为选中状态时，lable标签的样式，其中在css选择时，“：”表示当前input框的值，即checked；
      \2714代表对号*/
  #check1:checked + label::before {
    display: block;
    content: "\2714";
    text-align: center;
    font-size: 16px;
    background: blue;
    color: white;
  }

  #check1 {
    display:none;
  }

  // https://blog.csdn.net/fly_666/article/details/117476287
  /** 文本环绕效果首先考虑浮动 float
flex 布局子元素可以通过百分比计算高度
多行文本截断还可以结合文本环绕效果用max-height模拟实现
状态切换可以借助 checkbox
CSS 改变文本可以采用伪元素生成
多利用 CSS 遮挡 “障眼法”。
*/
  .desc-box {
    border: 1px solid #dbdbdb;
    border-width: 1px 0;
    padding: 20px 0;
    margin: 20px 0;
    display: flex;

    img {
      height: 100px;
      width: 150px;
      margin-right: 20px;
    }

    .desc {
      flex: 1;
      color: #7e8081;
      line-height: 28px;
      text-overflow: ellipsis;

      &.hide {
        height: 90px;
        display: -webkit-box; // 必须有，否则clamp可能不兼容
        overflow: hidden;
        word-wrap: break-word;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        white-space: normal; // 必须有，否则可能不换行！！！
      }

      &.act {
        height: "auto";
      }

      &::before {
        content: "";
        float: right;
        width: 0px;
        height: calc(100% - 24px);
        /*先随便设置一个高度*/
        background: red;
      }

      .btn {
        float: right; //展开
        /*其他装饰样式*/
        clear: both;
        border: 0px;
      }
    }

    // 标题单行省略号，内容多行行尾省略号
    .learn-text {
      width: 422px;
      height: 131px;
      overflow: hidden;
      overflow-wrap: break-word;
      text-overflow: ellipsis; //...

      .learn-title {
        height: 45px;
        display: block;
        color: rgba(55, 59, 75, 1);
        font-size: 32px;
        white-space: nowrap;
        text-overflow: ellipsis; //...
        overflow: hidden;
        line-height: 45px;
        text-align: left;
      }

      .learn-content {
        height: 74px;
        display: block;
        color: rgba(126, 128, 129, 1);
        text-overflow: ellipsis; //...
        // overflow: hidden;
        font-size: 26px;
        line-height: 37px;
        text-align: left;
        margin-top: 12px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;

        // &::before {
        //   content: '...';
        // }
      }
    }

    https: //blog.csdn.net/fly_666/article/details/117476287

    $height: 70px;

    .main {
      margin-left: calc(50% - 68px);
      height: calc(100vh - #{$height});
    }

    // img 水平居中
    img {
      clear: both;
      display: block;
      margin: auto;
    }

    // 透明底部 tab
    .tabbar-bottom {
      height: 120px;
      bottom: 100px;
      background: rgba(255, 255, 255, 0.9);
      box-shadow: 0px -3px 6px 0px rgba(0, 0, 0, 0.05);
      position: fixed;
      left: 0;
      z-index: 1;
      box-sizing: content-box;
      width: 100%;
    }

    // 图片配文字
    .step {
      overflow-x: auto;
      display: flex;
      justify-content: space-between;
      width: 100%;
      background: #ffffff;
      box-shadow: 0px 4px 8px 0px rgba(3, 27, 78, 0.12);
        border-radius: 5px;
    }

    .step-box {
      flex: 2;
      display: flex;
      justify-content: space-around;
      align-items: center;
      cursor: pointer;

      &.last {
        flex: 1;
        margin-right: 0;
      }

      &.active {
        .step-item {
          border-bottom: 4px solid #3a78fc;
          border-radius: 2px;
        }
      }

      .line {
        width: 60px;
        height: 20px;
      }
    }

    .step-item {
      padding: 20px;
      display: inline-block;
      position: relative;

      &.last {
        padding-left: 0;
        padding-right: 10px;
      }

      img {
        width: 60px;
        height: 60px;
        clear: both;
        display: block;
        margin: auto;
      }

      .tag {
        width: 14px;
        height: 29px;
        position: absolute;
        top: 0;
        left: 0;
      }

      p {
        margin-top: 10px;
        color: #373b4b;
        line-height: 28px;
        text-align: center;
        white-space: nowrap; // 关键，否则文字换行
      }

      // 调用wangeditor时的html样式
      /deep/ .dhtml {
        color: #5f6464;
        line-height: 24px;
        padding-bottom: 20px;
        margin-bottom: 20px;
        border-bottom: 1px solid #dbdbdb;

        table {
          border: none;
          border-collapse: collapse;
        }

        table td,
        table th {
          border: 1px solid black !important;
          padding: 3px 5px;
          min-width: 50px;
          height: 20px;
        }

        table th {
          border-right: 1px solid #ccc;
          border-bottom: 2px solid #ccc;
          text-align: center;
          background-color: #f1f1f1;
        }

        blockquote {
          display: block;
          border-left: 8px solid #d0e5f2;
          padding: 5px 10px;
          margin: 10px 0;
          line-height: 1.4;
          font-size: 100%;
          background-color: #f1f1f1;
        }

        code {
          display: inline-block;
          *display: inline;
          *zoom: 1;
          background-color: #f1f1f1;
          border-radius: 3px;
          padding: 3px 5px;
          margin: 0 3px;
        }

        pre code {
          display: block;
        }

        ul,
        ol {
          margin: 10px 0 10px 20px;
        }

        pre {
          border: 1px solid #ccc;
          background-color: #f8f8f8;
          padding: 10px;
          margin: 5px 0px;
          font-size: 0.8em;
          border-radius: 3px;
        }

        .ql-editor ul li {
          list-style-type: disc; // 解决序列li前面的.不展示问题
        }

        .ql-editor ol li {
          list-style-type: decimal; // 解决序列li前面的数字不展示问题
        }

        i {
          font-style: italic !important;
        }

        // wangeditor本身斜体按钮不生效
        // <div id="editor" class="unique"></div>
        .unique {
          i {
            font-style: italic !important;
          }
        }
      }